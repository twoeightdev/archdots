#+title: Archlinux Installation Guide
#+date: <2024-05-09 Thu 15:58>

* Disclaimer
/I am not responsible for any damages, loss of data, system corruption, or any/
/mishap you may somehow cause by following this guide./

* Preparation
** Before booting from usb stick check your hardware settings
- Disable Secure Boot
- Disable Launch CSM or Legacy Support
- Set Boot Mode to UEFI

** Burn ISO with CLI using *dd*
#+begin_src shell
dd bs=4M if=path/to/archlinux.iso of=/dev/sdx conv=fsync oflag=direct status=progress
#+end_src

** Change font
#+begin_src shell
setfont ter-132b
#+end_src

** Verify Boot Mode
If the command returns =64=, then it is booted in UEFI mode.
#+begin_src shell
cat /sys/firmware/efi/fw_platform_size
#+end_src

** Connect to the internet with *iwctl*
Check internet connection afterwards with =ping -c 3 archlinux.org=.
#+begin_src shell
iwctl
[iwd]# device list
[iwd]# station name scan
[iwd]# station name get-networks
[iwd]# station name connect SSID
#+end_src

** Update System Clock
#+begin_src shell
timedatectl status
timedatectl set-ntp true
#+end_src

** Partition Drive
Create drive partition in fdisk, type =g= to set disk to GPT disklabel, then type
=n= for new partition, and on last sector, set it to =+1G=. Add another partition
for root, type =n= then on last sector, just enter for all remainder of the device. Set
partition type, press =t= then =1= to select first created partition, then type =1= again
to set it to =EFI= partition. Type =p= to check if all partitions were correct, then
type =w= to write changes and exit. Recommended partitions:

| *Mount Point* | *Partition*      | *Partition Type*       | *Suggested Size*          |
|-------------+----------------+----------------------+-------------------------|
| /mnt/boot   | /dev/nvme0n1p1 | EFI System Partition | 512MiB                  |
| /mnt        | /dev/nvme01pn2 | Linux File System    | Remainder of the device |

#+begin_src shell
lsblk -f
fdisk /dev/nvme0n1
#+end_src

*** Format Drive
#+begin_src shell
mkfs.fat -F 32 /dev/nvme0n1p1
mkfs.ext4 /dev/nvme0n1p2
#+end_src

*** Mount Disk
#+begin_src shell
mount /dev/nvme0n1p2 /mnt
mount --mkdir /dev/nvme0n1p1 /mnt/boot
#+end_src

* Installation
** Mirror list
Edit mirror list =vim /etc/pacman.d/mirrorlist=.

*** Preferred Servers
- Server = https://mirror.xtom.com.hk/archlinux/$repo/os/$arch
- Server = http://mirror.xtom.com.hk/archlinux/$repo/os/$arch

** Pacstrap
#+begin_src shell
pacstrap -K /mnt base base-devel linux linux-firmware xf86-video-amdgpu mesa \
         vulkan-radeon libva-mesa-driver amd-ucode git neovim networkmanager \
         bluez bluez-utils cpupower zsh efibootmgr
#+end_src

* System Configuration

** Generate Fstab
After generating /fstab,/ Change /boot partition/ to =fmask=0077= and =dmask=0077=.
#+begin_src shell
genfstab -U /mnt >> /mnt/etc/fstab
vim /mnt/etc/fstab
#+end_src

** Chroot
#+begin_src shell
arch-chroot /mnt
#+end_src

** Timezone
#+begin_src shell
ln -sf /usr/share/zoneinfo/Asia/Manila /etc/localtime
hwclock --systohc
#+end_src

** Localization
Edit =/etc/locale.gen= and uncomment =en_PH.UTF-8 UTF-8=. Generate the locales by
running:
#+begin_src shell
locale-gen
echo LANG=en_PH.UTF-8 > /etc/locale.conf
#+end_src

** Network Configuration
*** Hostname
Edit =/etc/hostname= with your preferred hostname which in this case i'll be using /core/ as my
hostname name.
#+begin_src shell
echo core > /etc/hostname
#+end_src

*** Hosts
Edit =/etc/hosts= and add matching entries:
#+begin_src shell
127.0.0.1    localhost
::1          localhost
127.0.1.1    core.localdomain core
#+end_src

*** Choose preferred network management
**** Networkmanager
#+begin_src shell
systemctl enable NetworkManager.service
#+end_src

**** Systemd Networkd
Find the name of network adapter with =ip addr= then enable the service
=systemctl enable systemd-networkd.service=.

***** Wired Setup
Edit =/etc/systemd/network/20-wired.network= and add following entries:
#+begin_src shell
[Match]
Name=enp5s0

[Network]
DHCP=yes
DNS=1.1.1.1
#+end_src

***** Wireless Setup
Edit =/etc/systemd/network/25-wireless.network=
#+begin_src shell
[Match]
Name=wlp6s0

[Network]
DHCP=yes
DNS=1.1.1.1
IgnoreCarrierLoss=3s
#+end_src

** Bluetooth
Enable bluetooth service
#+begin_src shell
systemctl enable bluetooth.service
#+end_src

** Enable cpupower service
#+begin_src shell
systemctl enable cpupower.service
#+end_src

** Touchpad
Enable touch to click. Add the following entries in =/etc/X11/xorg.conf.d/40-libinput.conf=.
#+begin_src shell
Section "InputClass"
        Identifier "libinput touchpad catchall"
        MatchIsTouchpad "on"
        MatchDevicePath "/dev/input/event*"
        Option "Tapping" "on"
        Driver "libinput"
EndSection
#+end_src

** Disable Watchdog
Edit or Add entries in =/etc/modprobe.d/watchdog.conf=. or just add kernel parameter to
#+begin_src shell
blacklist iTCO_wdt
blacklist iTCO_vendor_support
#+end_src

** Root Password
#+begin_src shell
passwd
#+end_src

** Enable Multilib
Edit =/etc/pacman.conf/= then uncomment the following.
#+begin_src shell
Color
VerbosePkgLists
ILoveCandy

[multilib]
include = /etc/pacman.d/mirrorlist
#+end_src

** Add USER
#+begin_src shell
useradd -m -G users,wheel,video,audio,power,storage,disk -s /bin/zsh twoeightdev
passwd twoeightdev
#+end_src

** Add user to sudoers
uncomment =%wheel ALL=(ALL:ALL) ALL=
#+begin_src shell
visudo
#+end_src

** Bootloader
*** EFITSTUB
Get *UUID* with =blkid -s UUID -o value /dev/nvme0n1p2=
or *PARTUUID* with =blkid -s PARTUUID -o value /dev/nvme0n1p2=. Delete old
boot entries with =efibootmgr -b <bootnum> -B=. Create boot entry: Where
=/dev/nvme0n1/= and =Y= are the drive and partition number where *ESP* is located
and =root== parameters with your linux partitions.

#+begin_src shell
efibootmgr -d /dev/nvme0n1 -p Y -c -L "Arch" -l /vmlinuz-linux -u \
           'root=PARTUUID=set_PARTUUID_value_here rw quiet loglevel=3 \
           consol=ty2 amd_pstate=passive modprobe.blacklist=sp5100_tco \
           ipv6.disable=1 rd.systemd.show_status=false rd.udev.log_level=3 \
           initrd=\amd-ucode.img initrd=\initramfs-linux.img' \
           --verbose
#+end_src

*** GRUB
#+begin_src shell
pacman -S grub efibootmgr amd-ucode
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
#+end_src

*** Systemdboot
**** Installation
Get *UUID* with =blkid -s UUID -o value /dev/nvme0n1p2=. Remount to avoid errors
with =bootctl install=.
#+begin_src shell
exit
umount -R /mnt
mount /dev/nvme0n1p2 /mnt
arch-chroot /mnt
mount -a

bootctl install
#+end_src

**** Loader Configuration
Edit =/boot/loader/loader.conf=.
#+begin_src shell
default arch
timeout 0
console-mode max
editor no
#+end_src

**** Adding Loaders
Edit =/boot/loader/entries/arch.conf=.
#+begin_src shell
title Arch Linux
linux /vmlinuz-linux
initrd /amd-ucode.img
initrd /initramfs-linux.img
options root=UUID=set_UUID_here rw quiet loglevel=0 console=tty2 amd_pstate=passive \
        modprobe.blacklist=sp5100_tco ipv6.disable=1 rd.systemd.show_status=false \
        rd.udev.log_level=3
#+end_src

** Unmount and Reboot
#+begin_src shell
exit
umount -R /mnt
reboot
#+end_src