#+title: Emacs configuration
#+author: twoeightdev
#+auto_tangle: t
#+property: header-args :comments org

* Overview
This file is my *Emacs literate configuration*.

* Header
This file is an auto-generated header for tangled files.
#+name: header
#+begin_src emacs-lisp
  ;;; Auto-generated --- DO NOT EDIT -*- lexical-binding: t -*-

  ;; Copyright (C) 2024 twoeightdev

  ;; Author: twoeightdev <twoeightdev@gmail.com>
  ;; URL: https://github.com/twoeightdev

  ;;; Commentary:

  ;; Do NOT EDIT this file, this is `auto-generated' from my org config.
  ;; This is NOT part of GNU Emacs.

  ;;; Code:
#+end_src

* Early-init
:properties:
:header-args: :tangle early-init.el
:end:
This file is loaded before the package system and GUI is initialized.
#+begin_src emacs-lisp :noweb yes :comments no
  <<header>>

  (eval-after-load "startup"
	'(fset 'display-startup-echo-area-message 'ignore))

  (when (featurep 'native-compile)
	(let ((path (expand-file-name "var/eln-cache/" user-emacs-directory)))
	  (setq-default native-compile-target-directory path
					native-comp-eln-load-path (list path)
					native-comp-async-report-warnings-errors nil
					native-comp-deferred-compilation t
					native-comp-speed 2
					package-native-compile t)
	  (when (fboundp 'startup-redirect-eln-cache)
		(startup-redirect-eln-cache path))))

  (setq-default byte-compile-warnings '(not obsolete)
				package-native-compile t
				load-prefer-newer noninteractive
				package-enable-at-startup t
				site-run-file nil
				warning-suppress-log-types '((comp) (bytecomp)))

  (defvar file-name-handler-alist-original file-name-handler-alist)

  (setq file-name-handler-alist nil
	gc-cons-threshold most-positive-fixnum
	frame-resize-pixelwise t
	frame-inhibit-implied-resize t
	auto-window-vscroll nil
	ring-bell-function 'ignore
	use-file-dialog nil
	use-short-answer t
	initial-major-mode 'fundamental-mode
	initial-scratch-message nil
	inhibit-splash-screen t
	inhibit-x-resources t
	inhibit-default-init t
	inhibit-compacting-font-caches t
	inhibit-startup-screen t
	inhibit-startup-buffer-menu t)

  (defun me/return-default-gc()
	"Return default value of `gc-cons-threshold'."
	(setq-default gc-cons-threshold 800000))

  (defun me/garbage-collect-maybe()
	"Collect garbage."
	(unless (frame-focus-state)
	  (garbage-collect)))

  (add-hook 'after-init-hook #'me/return-default-gc)
  (add-function :after after-focus-change-function 'me/garbage-collect-maybe)

  (add-to-list 'custom-theme-load-path (expand-file-name "themes/" user-emacs-directory))
  (load-theme 'gruvbox t)

  (when (member "Iosevka Nerd Font" (font-family-list))
	(set-frame-font "Iosevka Nerd Font-14" t t))
  (set-fontset-font t 'emoji
			(cond
			 ((member "Noto Emoji" (font-family-list)) "Noto Emoji")))
  (set-face-attribute 'font-lock-comment-face nil :slant  'italic)
  (set-face-attribute 'font-lock-function-name-face nil :weight 'bold)
  (set-face-attribute 'font-lock-variable-name-face nil :slant 'italic)

  (set-window-scroll-bars (minibuffer-window) nil nil)
  (set-default-coding-systems 'utf-8)

  (modify-all-frames-parameters '((font . "Iosevka Nerd Font-14")
				  (alpha . 95)
				  (inherit-double-buffering . t)
				  (menu-bar-lines . nil)
				  (tool-bar-lines . nil)
				  (vertical-scroll-bars . nil)
				  (horizontal-scroll-bars . nil)))

  (blink-cursor-mode -1)
  (pixel-scroll-precision-mode 1)
  (column-number-mode t)
  (global-font-lock-mode 1)
  (tooltip-mode -1)
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)

  (add-hook 'emacs-startup-hook #'(lambda () (message "Init %s" (emacs-init-time))))
#+end_src

** Footer early-init
Convent footer for early-init.el

#+begin_src emacs-lisp
  ;;; early-init.el ends here
#+end_src

* Init
:properties:
:header-args: :tangle init.el
:end:
Generated init.el file.

** Better defaults
Preferred defaults.

#+begin_src emacs-lisp :noweb yes :comments no
  <<header>>

  (setq-default read-process-output-max (* 1024 1024))
  (setq-default ad-redefinition-action 'accept)
  (setq-default server-client-instructions nil)
  (setq-default help-window-select t)
  (setq-default window-combination-resize t)
  (setq-default comment-multi-line t)
  (setq-default sentence-end-double-space nil)
  (setq-default fill-column 80)
  (setq-default tab-width 4)
  (setq-default cursor-in-non-selected-windows nil)
  (setq-default mouse-yank-at-point t)
  (setq-default scroll-step 1)
#+end_src

** Package management
Package.el with use-package.

#+begin_src emacs-lisp
  (setq-default use-package-always-defer t)
  (setq-default use-package-always-ensure t)

  (require 'package)
  (require 'use-package)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") 'append)
#+end_src

** Organize
Clean clutter

#+begin_src emacs-lisp
  (use-package no-littering)

  (make-directory (expand-file-name "auto-saves/" user-emacs-directory) t)
  (setq auto-save-list-file-prefix
		(expand-file-name "auto-saves/sessions/" user-emacs-directory)
		auto-save-file-name-transforms
		`((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  (setq backup-directory-alist '(("." . "~/.config/emacs/backups")))
  (setq version-control t)
  (setq backup-by-copying t)
  (setq delete-old-versions t)
  (setq kept-new-versions 2)
  (setq kept-old-versions 2)
  (setq auto-save-default nil)
  (setq create-lockfiles nil)
  (setq auto-save-list-file-prefix nil)
  (setq mode-require-final-newline nil)
  (setq large-file-warning-threshold nil)
#+end_src

** Auto tangle
Auto tangle this org file.

#+begin_src emacs-lisp
  (use-package org-auto-tangle
	:hook
	(org-mode . org-auto-tangle-mode))
#+end_src

** Evil
Evil mode.

#+begin_src emacs-lisp
  (use-package evil
	:demand t
	:custom
	(evil-want-C-i-jump nil)
	:config
	(evil-mode))
#+end_src

** Org
Org mode.

#+begin_src emacs-lisp :tangle no
  (use-package org
  :ensure nil
   org-src-preserve-indentation t
   org-edit-src-content-indentation 4)
#+end_src

** Footer init
Convent footer for init.el

#+begin_src emacs-lisp
  ;;; init.el ends here
#+end_src

