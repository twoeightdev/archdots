#+title: Emacs configuration
#+author: twoeightdev
#+auto_tangle: t
#+property: header-args :comments org

* Overview
This org document is a literate configuration for vanilla GNU Emacs.
~C-c C-v t~ to tangle this file and restart emacs. This file will
automatically tangle on save after the packages are downloaded.

* Convent Header
Auto-generate a header on top of ~early-init.el~ and ~init.el~ using
[[https://orgmode.org/manual/Noweb-Reference-Syntax.html][noweb]] syntax.
#+name: header
#+begin_src emacs-lisp
;;; Auto-generated --- DO NOT EDIT -*- lexical-binding: t -*-

;; Copyright (C) 2024 twoeightdev
;; Author: twoeightdev <twoeightdev@gmail.com>
;; URL: https://github.com/twoeightdev

;;; Commentary:

;; This file is NOT part of GNU Emacs. This is `auto-generated' from my
;; `twoeightdev.org' org configuration file.

;;; Code:
#+end_src

* Early Init
:properties:
:header-args: :tangle early-init.el
:end:
This is loaded before the package system and GUI is initialized.
#+begin_src emacs-lisp :noweb yes :comments no
<<header>>

;; (eval-after-load "startup"
  ;; '(fset 'display-startup-echo-area-message 'ignore))

(defvar file-name-handler-alist-original file-name-handler-alist)

(setq gc-cons-threshold most-positive-fixnum
	  file-name-handler-alist nil
	  package-enable-at-startup t
	  load-prefer-newer noninteractive
	  frame-inhibit-implied-resize t
	  initial-scratch-message nil
	  initial-major-mode 'fundamental-mode
	  inhibit-x-resources t
	  inhibit-compacting-font-caches t)

(when (featurep 'native-compile)
  (let ((path (expand-file-name "var/eln-cache/" user-emacs-directory)))
	(setq-default native-compile-target-directory path
				  native-comp-eln-load-path (list path)
				  native-comp-async-report-warnings-errors nil
				  native-comp-deferred-compilation t
				  native-comp-speed 2
				  nackage-native-compile t)
	(when (fboundp 'startup-redirect-eln-cache)
	  (startup-redirect-eln-cache path))))

(setq-default byte-compile-warnings '(not obsolete)
			  package-native-compile t
			  site-run-file nil
			  warning-suppress-log-types '((comp) (bytecomp)))

(modify-all-frames-parameters '((font . "Iosevka Nerd Font-14")
								(alpha . 95)
								(menu-bar-lines . nil)
								(tool-bar-lines . nil)
								(vertical-scroll-bars . nil)
								(horizontal-scroll-bars . nil)))

(add-to-list 'custom-theme-load-path (expand-file-name "themes/" user-emacs-directory))
(add-to-list 'load-path (expand-file-name "themes/" user-emacs-directory))
;; (load-theme 'gruvbox t)
;;(load-theme 'rose-pine t)
(load-theme 'catppuccin t)

(set-face-attribute 'font-lock-comment-face nil :slant  'italic)
(set-face-attribute 'font-lock-function-name-face nil :weight 'bold)
(set-face-attribute 'font-lock-variable-name-face nil :slant 'italic)

(set-default-coding-systems 'utf-8)
(blink-cursor-mode -1)
(pixel-scroll-precision-mode 1)
(column-number-mode t)
(global-font-lock-mode 1)
(tooltip-mode -1)
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)

(defun startup-echo-area-message ()
  (format "Emacs initialized in %.2fs with %d garbage collected."
		  (float-time (time-subtract after-init-time before-init-time))
		  gcs-done))
#+end_src

** Early-init footer
Auto-generated convent footer for ~early-init.el~.
#+begin_src emacs-lisp
;;; early-init.el ends here
#+end_src

* Init
:properties:
:header-args: :tangle init.el
:end:
Main configuration file that will generate ~init.el~ on save.

** Better defaults
Preferred defaults.
#+begin_src emacs-lisp :noweb yes :comments no
<<header>>

(setq-default read-process-output-max (* 1024 1024))
(setq-default ad-redefinition-action 'accept)
(setq-default server-client-instructions nil)
(setq-default help-window-select t)
(setq-default window-combination-resize t)
(setq-default comment-multi-line t)
(setq-default sentence-end-double-space nil)
(setq-default fill-column 80)
(setq-default tab-width 4)
(setq-default cursor-in-non-selected-windows nil)
(setq-default mouse-yank-at-point t)
(setq-default scroll-step 1)
#+end_src

** Package
Package.el with use-package.
#+begin_src emacs-lisp
(setq-default use-package-always-defer t)
(setq-default use-package-always-ensure t)

(require 'package)
(require 'use-package)

(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") 'append)
#+end_src

** Organize
Keep emacs directory clean.
#+begin_src emacs-lisp
(use-package no-littering)

(make-directory (expand-file-name "auto-saves/" user-emacs-directory) t)
(setq auto-save-list-file-prefix
	  (expand-file-name "auto-saves/sessions/" user-emacs-directory)
	  auto-save-file-name-transforms
	  `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))

(setq backup-directory-alist '(("." . "~/.config/emacs/backups")))
(setq version-control t)
(setq backup-by-copying t)
(setq delete-old-versions t)
(setq kept-new-versions 2)
(setq kept-old-versions 2)
(setq auto-save-default nil)
(setq create-lockfiles nil)
(setq auto-save-list-file-prefix nil)
(setq mode-require-final-newline nil)
(setq large-file-warning-threshold nil)
#+end_src

** Auto-tangle
Automatically tangle org files on save.
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :hook
  (org-mode . org-auto-tangle-mode))
#+end_src

** Evil
Extensible vi layer Emacs.
#+begin_src emacs-lisp
(use-package evil
  :demand t
  :custom
  (evil-want-C-i-jump nil)
  (evil-want-C-d-scroll nil)
  :hook
  (after-init . evil-mode))
#+end_src

** General
More convenient key definitions.
#+begin_src emacs-lisp
(use-package general
  :demand t
  :config
  (general-evil-setup)
  (general-create-definer twoeightdev/leader-keys
	:states '(normal insert visual emacs)
	:keymaps 'override
	:prefix "SPC"
	:global-prefix "M-SPC")

  (general-unbind
	"C-x C-r"
	"C-x C-z"
	"C-x C-d"
	"<mouse-2>")

  (twoeightdev/leader-keys
	"SPC" '(execute-extended-command :wk "execute command")
	"TAB" '(:keymap tab-prefix-map :wk "tab")
	"s" '(:keymap evil-window-map :wk "window")
	"w" '(save-buffer :wk "save file")
	"q" '(evil-quit :wk "quit")
	"'" '(comment-line :wk "comment line")
	"c" '(:ignore t :wk "code")
	"h" '(:ignore t :wk "help")
	"f" '(:ignore t :wk "file")
	"ff" '(find-file :wk "find file")
	"b" '(:ignore t :wk "buffer")
	"bb" '(switch-to-buffer :wk "switch buffer")
	"bk" '(kill-this-buffer :wk "kill this buffer")
	"br" '(revert-buffer :wk "revert buffer")))
#+end_src

** Org
Org mode.
#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :general
  (twoeightdev/leader-keys
	"fc" '(twoeightdev/org-config :wk "org config"))
  :config
  (defconst twoeightdev/org-path
	(locate-user-emacs-file "twoeightdev.org")
	"Path to my `org' configuration file.")
  (defun twoeightdev/org-config ()
	"Open my `org' configuraiton file."
	(interactive)
	(find-file twoeightdev/org-path))
  :custom
  (org-edit-src-content-indentation 0)
  (org-src-preserve-indentation nil))
#+end_src

** Treesit
Treesitter
#+begin_src emacs-lisp
(use-package treesit
  :ensure nil
  :commands (treesit-install-language-grammar twoeightdev/treesit-install-all)
  :init
  (setq treesit-language-source-alist
		'((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
		  (css . ("https://github.com/tree-sitter/tree-sitter-css"))
		  (html . ("https://github.com/tree-sitter/tree-sitter-html"))
		  (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
		  (json . ("https://github.com/tree-sitter/tree-sitter-json"))
		  (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
		  (make . ("https://github.com/alemuller/tree-sitter-make"))
		  (markdown . ("https://github.com/ikatyang/tree-sitter-markdown"))
		  (python . ("https://github.com/tree-sitter/tree-sitter-python"))
		  (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))
		  (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
		  (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
		  (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))))
  :config
  (defun twoeightdev/treesit-install-all()
	"Install all languages specified by `treesit-language-source-alist'."
	(interactive)
	(let ((languages (mapcar 'car treesit-language-source-alist)))
	  (dolist (lang languages)
		(treesit-install-language-grammar lang)
		(message "`%s' parser was installed." lang)
		(sit-for 0.75)))))
#+end_src

** Treesit-auto
Treesit auto install.
#+begin_src emacs-lisp
(use-package treesit-auto
  :demand t
  :config
  (global-treesit-auto-mode)
  (setq treesit-language-source-alist
		'((bash "https://github.com/tree-sitter/tree-sitter-bash")
		  (css "https://github.com/tree-sitter/tree-sitter-css")
		  (html "https://github.com/tree-sitter/tree-sitter-html")
		  (javascript "https://github.com/tree-sitter/tree-sitter-javascript")
		  (json "https://github.com/tree-sitter/tree-sitter-json")
		  (lua "https://github.com/Azganoth/tree-sitter-lua")
		  (make "https://github.com/alemuller/tree-sitter-make")
		  (markdown "https://github.com/ikatyang/tree-sitter-markdown")
		  (python "https://github.com/tree-sitter/tree-sitter-python")
		  (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
		  (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
		  (toml "https://github.com/tree-sitter/tree-sitter-toml")
		  (yaml "https://github.com/ikatyang/tree-sitter-yaml"))))
#+end_src

** Eglot
Eglot
#+begin_src emacs-lisp
(use-package eglot
  :ensure nil
  :hook
  (prog-mode . eglot-ensure))
#+end_src

** Which-key
Display key bindings following your currently entered incomplete command
in a popup.
#+begin_src emacs-lisp
(use-package which-key
  :config
  (which-key-setup-minibuffer)
  :hook
  (after-init . which-key-mode))
#+end_src

** Garbage collect
Emacs garbage collection. [[https://akrl.sdf.org/#orgc15a10d][reference]].
#+begin_src emacs-lisp
(defmacro k-time (&rest body)
  "Measure and return the time it takes evaluating BODY."
  `(let ((time (current-time)))
	 ,@body
	 (float-time (time-since time))))

;; (setq gc-cons-threshold (* 16 1024 1024))
(setq gc-cons-percentage .6)

(defvar k-gc-timer
  (run-with-idle-timer 15 t
					   (lambda ()
						 (message "Garbage Collector has run for %.06fsec"
								  (k-time (garbage-collect))))))
#+end_src

** Init footer
Auto-generated convent footer for ~init.el~.
#+begin_src emacs-lisp
;; Local Variables:
;; byte-compile-warnings: (not unresolved free-vars)
;; End:
;;; init.el ends here
#+end_src
