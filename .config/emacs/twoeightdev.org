#+TITLE: Emacs configuration
#+AUTHOR: twoeightdev
#+PROPERTY: header-args :comments org

* Overview
This org document is a literate configuration for vanilla GNU Emacs.
~C-c C-v t~ to tangle this file and restart emacs. This file will
automatically tangle on save after the packages are downloaded.

* Table Of Contents
:properties:
:TOC: :include all :ignore this
:end:

:CONTENTS:
- [[#overview][Overview]]
- [[#convent-header][Convent Header]]
- [[#early-init][Early Init]]
  - [[#early-init-footer][Early-init footer]]
- [[#init][Init]]
  - [[#better-defaults][Better defaults]]
  - [[#package][Package]]
  - [[#organize][Organize]]
  - [[#evil][Evil]]
  - [[#general][General]]
  - [[#rg][Rg]]
  - [[#org][Org]]
  - [[#toc-generator][TOC Generator]]
  - [[#treesit][Treesit]]
  - [[#python][Python]]
  - [[#treesit-old][Treesit Old]]
  - [[#eglot][Eglot]]
  - [[#which-key][Which-key]]
  - [[#garbage-collect][Garbage collect]]
  - [[#statusline][Statusline]]
  - [[#dashboard][Dashboard]]
  - [[#init-footer][Init footer]]
:END:

* Convent Header
Auto-generate a header on top of ~early-init.el~ and ~init.el~ using
[[https://orgmode.org/manual/Noweb-Reference-Syntax.html][noweb]] syntax.
#+name: autogen-header
#+begin_src emacs-lisp
;;; Auto-generated --- DO NOT EDIT -*- lexical-binding: t -*-

;; Copyright (C) 2024 twoeightdev
;; Author: twoeightdev <twoeightdev@gmail.com>
;; URL: https://github.com/twoeightdev

;;; Commentary:

;; This file is NOT part of GNU Emacs. This is `auto-generated' from my
;; `twoeightdev.org' org configuration file.

;;; Code:
#+end_src

* Early Init
:properties:
:header-args: :tangle early-init.el
:end:
This is loaded before the package system and GUI is initialized.
#+begin_src emacs-lisp :noweb yes :comments no
<<autogen-header>>

(eval-after-load "startup"
  '(fset 'display-startup-echo-area-message 'ignore))

(defvar file-name-handler-alist-original file-name-handler-alist)

(setq gc-cons-threshold most-positive-fixnum
      file-name-handler-alist nil
      package-enable-at-startup t
      load-prefer-newer noninteractive
      frame-inhibit-implied-resize t
      initial-scratch-message nil
      initial-major-mode 'fundamental-mode
      inhibit-x-resources t
      inhibit-compacting-font-caches t)

(when (featurep 'native-compile)
  (let ((path (expand-file-name "var/eln-cache/" user-emacs-directory)))
    (setq-default native-compile-target-directory path
                  native-comp-eln-load-path (list path)
                  native-comp-async-report-warnings-errors nil
                  native-comp-deferred-compilation t
                  native-comp-speed 2
                  nackage-native-compile t)
    (when (fboundp 'startup-redirect-eln-cache)
      (startup-redirect-eln-cache path))))

(setq-default byte-compile-warnings '(not obsolete)
              package-native-compile t
              site-run-file nil
              warning-suppress-log-types '((comp) (bytecomp)))

(modify-all-frames-parameters '((font . "Iosevka Nerd Font-14")
                                (alpha . 98)
                                (menu-bar-lines . nil)
                                (tool-bar-lines . nil)
                                (vertical-scroll-bars . nil)
                                (horizontal-scroll-bars . nil)))

(add-to-list 'custom-theme-load-path (expand-file-name "themes/" user-emacs-directory))
(add-to-list 'load-path (expand-file-name "themes/" user-emacs-directory))
(load-theme 'catppuccin t)

(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
(set-face-attribute 'font-lock-function-name-face nil :weight 'bold)
(set-face-attribute 'font-lock-variable-name-face nil :slant 'italic)

(set-default-coding-systems 'utf-8)
(blink-cursor-mode -1)
(pixel-scroll-precision-mode 1)
(column-number-mode t)
(global-font-lock-mode 1)
(tooltip-mode -1)
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") 'append)

;; (defun startup-echo-area-message ()
  ;; (format "Emacs initialized in %.2fs with %d garbage collected."
          ;; (float-time (time-subtract after-init-time before-init-time))
          ;; gcs-done))
#+end_src

** Early-init footer
Auto-generated convent footer for ~early-init.el~.
#+begin_src emacs-lisp
;;; early-init.el ends here
#+end_src

* Init
:properties:
:header-args: :tangle init.el
:end:
Main configuration file that will generate ~init.el~ on save.

** Package
Package.el with use-package.
#+BEGIN_SRC emacs-lisp :noweb yes :comments no
<<autogen-header>>

(use-package use-package
  :ensure nil
  :no-require
  :custom
  (use-package-always-defer t)
  (use-package-always-ensure t))
#+END_SRC

** Better Defaults
Preferred defaults.
#+begin_src emacs-lisp
(use-package defaults
  :ensure nil
  :no-require
  :preface
  (setq-default read-process-output-max (* 1024 1024)
                ad-redefinition-action 'accept
                server-client-instructions nil
                help-window-select t
                window-combination-resize t
                comment-multi-line t
                truncate-lines t
                sentence-end-double-space nil
                fill-column 80
                tab-width 4
                cursor-in-non-selected-windows nil
                mouse-yank-at-point t
                scroll-step 1
                scroll-margin 1
                scroll-conservatively 101
                indent-tabs-mode nil)
  (provide 'defaults))
#+end_src

** Organize
#+BEGIN_SRC emacs-lisp
(use-package files
  :ensure nil
  :preface
  (defvar backup-dir
    (locate-user-emacs-file ".cache/backups")
    "Directory to store backups.")

  (defvar auto-save-dir
    (locate-user-emacs-file ".cache/auto-save/")
    "Directory to store auto-save files.")
  :custom
  (backup-by-copying t)
  (create-lockfiles nil)
  (version-control t)
  (delete-old-versions t)
  (kept-new-versions 2)
  (kept-old-versions 2)
  (large-file-warning-threshold nil)
  (auto-save-list-file-prefix nil)
  (backup-directory-alist
   `(("." . ,backup-dir)))
  (auto-save-file-name-transforms
   `((".*" ,auto-save-dir t)))
  (auto-save-no-message t)
  (auto-save-interval 100)
  (require-final-newline t)
  :init
  (unless (file-exists-p auto-save-dir)
    (make-directory auto-save-dir t)))
#+END_SRC

** Line Numbers
#+BEGIN_SRC emacs-lisp
(use-package display-line-numbers
  :preface
  (defun twoeightdev/prog-mode ()
    "Initial configuration for `prog-mode'."
    (display-line-numbers-mode))
  :hook
  (prog-mode . twoeightdev/prog-mode)
  :custom
  (display-line-numbers-width 4)
  (display-line-numbers-grow-only t)
  (display-line-numbers-width-start t))
#+END_SRC

** Evil
Extensible vi layer Emacs.
#+begin_src emacs-lisp
(use-package evil
  :demand t
  :functions evil-mode
  :defines evil-insert-state-map
  :custom
  (evil-want-C-i-jump nil)
  (evil-want-C-d-scroll nil)
  (evil-want-keybinding nil)
  (evil-auto-indent nil)
  (evil-respect-visual-line-mode t)
  :config
  (evil-mode 1)
  ;; Conflict with corfu
  (define-key evil-insert-state-map (kbd "C-k") nil))

(use-package evil-collection
  :after evil
  :functions evil-collection-init
  :config
  (evil-collection-init))

(use-package evil-org
  :after (evil org)
  :functions evil-org-set-key-theme evil-org-agenda-set-keys
  :hook
  ((org-mode . evil-org-mode)
   (org-agenda-mode . evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-set-key-theme
   '(navigation todo insert textobjects additional))
  (evil-org-agenda-set-keys))
#+end_src

** General
More convenient key definitions.
#+begin_src emacs-lisp
(use-package general
  :demand t
  :defines twoeightdev/leader-keys
  :functions general-evil-setup general-create-definer twoeightdev/leader-keys general-unbind
  :config
  (general-evil-setup)
  (general-create-definer twoeightdev/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "M-SPC")

  (general-unbind
    "C-x C-r"
    "C-x C-z"
    "C-x C-d"
    "<mouse-2>")

  (twoeightdev/leader-keys
    "SPC" '(execute-extended-command :wk "execute command")
    "TAB" '(:keymap tab-prefix-map :wk "tab")
    "s" '(:keymap evil-window-map :wk "window")
    "w" '(save-buffer :wk "save file")
    "q" '(evil-quit :wk "quit")
    "'" '(comment-line :wk "comment line")
    "c" '(:ignore t :wk "code")
    "h" '(:ignore t :wk "help")
    "f" '(:ignore t :wk "file")
    "ff" '(find-file :wk "find file")
    "b" '(:ignore t :wk "buffer")
    "bb" '(switch-to-buffer :wk "switch buffer")
    "bk" '(kill-this-buffer :wk "kill this buffer")
    "br" '(revert-buffer :wk "revert buffer")))
#+end_src

** Org
Org mode.
#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :preface
  (defun twoeightdev/org-setup ()
    (org-indent-mode 1)
    (auto-fill-mode 0)
    (prettify-symbols-mode 1)
    (visual-line-mode 0))

  (defconst twoeightdev/notes-path
    (expand-file-name "notes.org" "~/.local/notes")
    "Path to personal notes file.")

  (defconst twoeightdev/org-path
    (locate-user-emacs-file "twoeightdev.org")
    "Path to my `org' configuration file.")

  (defun twoeightdev/org-config ()
    "Open my `org' configuraiton file."
    (interactive)
    (find-file twoeightdev/org-path))

  (defun twoeightdev/org-tangle-config ()
    "Auto tangle this org configuration file."
    (when (string-equal (buffer-file-name)
                        (expand-file-name "twoeightdev.org" user-emacs-directory))
      (org-babel-tangle)))
  :general
  (twoeightdev/leader-keys
    "fc" '(twoeightdev/org-config :wk "org configuration file")
    "aa" '(org-agenda :wk "org agenda"))
  :custom
  (org-edit-src-content-indentation 0)
  (org-src-preserve-indentation nil)
  (org-directory "~/.local/src/orgnotes/agenda")
  (org-default-notes-file twoeightdev/notes-path)
  (org-src-window-setup 'current-window)
  (org-return-follows-link t)
  (org-image-actual-width nil)
  (org-hide-emphasis-markers t)
  (org-hide-leading-stars t)
  (org-catch-invisible-edits 'show-and-error)
  ;; Start new
  (org-ellipsis " 󱨉")
  (org-src-fontify-natively t)
  (org-fontify-quote-and-verse-blocks t)
  (org-startup-folded 'content)
  (org-pretty-entities t)
  (prettify-symbols-unprettify-at-point 'right-edge)
  (prettify-symbols-alist
   '(("#+BEGIN_SRC" . "")
     ("#+END_SRC" . "")
     ("#+begin_src" . "")
     ("#+end_src" . "")))
  (org-agenda-files (list "gtd.org" "purge.org"))
  (org-agenda-start-on-weekday 1)
  (org-agenda-timegrid-use-ampm 1)
  (org-agenda-show-all-dates nil)
  (org-agenda-window-setup 'current-window)
  :hook
  (org-mode . twoeightdev/org-setup)
  (after-save . twoeightdev/org-tangle-config))

(use-package org-appear
  :custom
  (org-appear-autolinks t)
  :hook
  (org-mode . org-appear-mode))

(use-package org-bullets
  :defines org-bullets-bullet-list
  :hook
  (org-mode . org-bullets-mode)
  :config
  (setq org-bullets-bullet-list '("󰪥" "󰻃" "✿" "✱" "❖" "🞆" "✸")))
#+end_src

** TOC Generator
#+begin_src emacs-lisp
(use-package org-make-toc)
#+end_src

** Treesit Old
Treesitter
#+begin_src emacs-lisp :tangle no
(use-package treesit
  :ensure nil
  :defines c-ts-mode-indent-offset
  :commands (treesit-install-language-grammar twoeightdev/treesit-install-all)
  :preface
  (defun twoeightdev/treesit-install-all ()
    "Install all languages specified by `treesit-language-source-alist'."
    (interactive)
    (let ((languages (mapcar 'car treesit-language-source-alist)))
      (dolist (lang languages)
        (treesit-install-language-grammar lang)
        (message "`%s' parser was installed." lang)
        (sit-for 0.75))))
  :config
  (setq-default c-ts-mode-indent-offset 4)
  (setq-default treesit-language-source-alist
                '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
                  (css . ("https://github.com/tree-sitter/tree-sitter-css"))
                  (html . ("https://github.com/tree-sitter/tree-sitter-html"))
                  (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
                  (json . ("https://github.com/tree-sitter/tree-sitter-json"))
                  (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
                  (markdown . ("https://github.com/ikatyang/tree-sitter-markdown"))
                  (python . ("https://github.com/tree-sitter/tree-sitter-python"))
                  (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
                  (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))))
  (setq-default major-mode-remap-alist
                '((sh-mode . bash-ts-mode)
                  (python-mode . python-ts-mode)))
                  ;; (lua-mode . lua-ts-mode)
                  ;; (markdown-mode . markdown-ts-mode)))
  :custom
  (treesit-font-lock-level 2))
#+end_src

** Python Old
#+BEGIN_SRC emacs-lisp :tangle no
(use-package python-ts-mode
  :ensure nil
  :after python
  :init
  (setq-default major-mode-remap-alist
                '((python-mode . python-ts-mode))))
#+END_SRC

** Treesit
#+BEGIN_SRC  emacs-lisp
(use-package treesit
  :ensure nil
  :when (treesit-p)
  :preface
  (defun treesit-p ()
    "Check if Emacs was built with treesiter in a protable way."
    (and (fboundp 'treesit-available-p)
         (treesit-available-p)))

  (cl-defun treesit-install-and-remap
      (lang url &key revision source-dir modes remap org-src)
    "Convenience function for installing and enabling a ts-* mode.

LANG is the language symbol.  URL is the Git repository URL for the
grammar.  REVISION is the Git tag or branch of the desired version,
defaulting to the latest default branch.  SOURCE-DIR is the relative
subdirectory in the repository in which the grammar’s parser.c file
resides, defaulting to \"src\".  MODES is a list of modes to remap to a
symbol REMAP.  ORG-SRC is a cons specifying a source code block language
name and a corresponding major mode."
    (when (and (fboundp 'treesit-available-p)
               (treesit-available-p))
      (unless (treesit-language-available-p lang)
        (add-to-list
         'treesit-language-source-alist
         (list lang url revision source-dir))
        (treesit-install-language-grammar lang))
      (when (and remap (treesit-ready-p lang))
        (dolist (mode modes)
          (add-to-list
           'major-mode-remap-alist
           (cons mode remap))))
      (when (and org-src (treesit-ready-p lang))
        (eval-after-load 'org
          (lambda ()
            (add-to-list 'org-src-lang-modes org-src))))))
  :custom
  (treesit-font-lock-level 2))
#+END_SRC

** Python
#+BEGIN_SRC  emacs-lisp
(use-package python-ts-mode
  :ensure nil
  :after python
  :when (treesit-p)
  :init
  (treesit-install-and-remap
   'python "https://github.com/tree-sitter/tree-sitter-python"
   :modes '(python-mode)
   :remap 'python-ts-mode
   :org-src '("python" . python-ts)))
#+END_SRC

** Lua
#+BEGIN_SRC emacs-lisp
(use-package lua-mode
  :custom
  (lua-indent-level 4)
  :config
  (add-to-list 'auto-mode-alist '("\\.lua$'" . lua-mode))
  (add-to-list 'interpreter-mode-alist '("lua" . lua-mode)))

(use-package lua-ts-mode
  :ensure nil
  :when (and (treesit-p)
             (package-installed-p 'lua-ts-mode))
  :mode "\\.lua\\'"
  :custom
  (lua-ts-indent-offset 4)
  :init
  (treesit-install-and-remap
   'lua "https://github.com/MunifTanjim/tree-sitter-lua"
   :org-src '("lua" . lua-ts)))

(use-package lua-prettify
  :ensure nil
  :hook ((lua-mode lua-ts-mode) . lua-prettify-mode)
  :delight lua-prettify-mode
  :preface
  (defgroup lua-prettify ()
    "Lua prettification and ease of writing enchancements."
    :prefix "lua-prettify-"
    :group 'languages)
  (defcustom lua-prettify-syntax-expansions
    '(("def" "local function")
      ("unless" "if not")
      ("fn"  "function")
      ("let" "local")
      ("<-" "return"))
    "List of abbreviarions and expansions for Lua"
    :type '(repeat (list string string))
    :group 'lua-prettify)
  (defvar lua-prettify--original-syntax-table nil
    "Original Lua syntax table.

Syntax table is modified for abbreviation expansion to work on
characters not considiered as word characters in original Lua table.
This variable holds the original value to be restored once the mode is
disabled.")
  (defun lua-prettify--expand-abbrev-maybe ()
    "Special advise for expanding abbreviations.

Abbrevs that normally don't expand via abbrev-mode are handled manually."
    (when (looking-back "<-" 1)
      (delete-char -2)
      (abbrev-insert (abbrev-symbol "<-"))))
  (defun lua-prettify--cleanup ()
    "Disable Lua prettification."
    (setq prettify-symbols-alist nil)
    (prettify-symbols-mode -1)
    (abbrev-mode -1)
    (remove-function
     (local 'abbrev-expand-function)
     #'lua-prettify--expand-abbrev-maybe)
    (when lua-prettify--original-syntax-table
      (set-syntax-table lua-prettify--original-syntax-table)
      (setq lua-prettify--original-syntax-table nil)))
  (defun lua-prettify--setup ()
    "Setup Lua prettification."
    (setq prettify-symbols-alist
          (mapcar (lambda (abbrev-exp)
                    (let ((abbrev (car abbrev-exp))
                          (exp (cadr abbrev-exp)))
                      `(,exp . ,(thread-last
                                  abbrev
                                  (mapcan
                                   (lambda (ch)
                                     (list '(Br . Bl) ch)))
                                  cdr
                                  vconcat))))
                  lua-prettify-syntax-expansions))
    (prettify-symbols-mode 1)
    (let ((at (eval (intern (format "%s-abbrev-table" major-mode)))))
      (dolist (abbrev-exp lua-prettify-syntax-expansions)
        (apply #'define-abbrev at abbrev-exp)))
    (setq lua-prettify--original-syntax-table (syntax-table))
    (modify-syntax-entry ?- "w 12")
    (abbrev-mode 1)
    (add-function
     :before (local 'abbrev-expand-function)
     #'lua-prettify--expand-abbrev-maybe))
  (define-minor-mode lua-prettify-mode
    "Lua prettification and ease of writing enchancements."
    :lighter " Lua Pretty"
    :init-value nil
    (if (and lua-prettify-mode
             (not current-prefix-arg))
        (lua-prettify--setup)
      (lua-prettify--cleanup)))
  (provide 'lua-prettify))

#+END_SRC

** Eglot
Eglot
#+begin_src emacs-lisp
(use-package eglot
  :ensure nil
  :hook
  (prog-mode . eglot-ensure)
  ;; (python-mode . eglot-ensure)
  ;; (sh-mode . eglot-ensure)
  ;; (bash-mode . eglot-ensure)
  :init
  (setq eglot-stay-out-of '(flymake eldoc)))
#+end_src

** Vertico
#+BEGIN_SRC emacs-lisp
(use-package vertico
  :bind
  (:map vertico-map
        ("M-RET" . vertico-exit-input))
  :hook
  (after-init . vertico-mode))

(use-package vertico-directory
  :ensure nil
  :after vertico
  :bind
  (:map vertico-map
        ("RET" . vertico-directory-enter)
        ("DEL" . vertico-directory-delete-char)
        ("M-DEL" . vertico-directory-delete-word))
  :hook
  (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+END_SRC

** Marginalia
#+BEGIN_SRC emacs-lisp
(use-package marginalia
  :hook
  (after-init . marginalia-mode))
#+END_SRC

** Orderless
#+BEGIN_SRC emacs-lisp
(use-package orderless
  :custom
  (completion-category-overrides
   '((buffer (styles basic orderless))
     (file (styles basic orderless))
     (project-file (styles basic orderless)))))
#+END_SRC

** Corfu
#+BEGIN_SRC emacs-lisp
(use-package corfu
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous)
        ([remap completion-at-point] . corfu-complete)
        ("RET" . corfu-complete-and-quit)
        ("<return>" . corfu-complete-and-quit))
  :commands (corfu-quit)
  :custom
  (corfu-cycle t)
  (corfu-preselect-first t)
  (corfu-scroll-margin 4)
  (corfu-quit-no-match t)
  (corfu-quit-at-boundary t)
  ;; (corfu-max-width 100)
  ;; (corfu-min-width 42)
  (corfu-count 9)
  (corfu-popupinfo-delay 0.2)
  (corfu-auto t)
  (corfu-auto-prefix 2)
  (corfu-auto-delay 0.2)
  (tab-always-indent 'complete)
  :config
  (defun corfu-complete-and-quit ()
    (interactive)
    (corfu-complete)
    (corfu-quit))
  :hook
  (after-init . global-corfu-mode))

(use-package corfu-popupinfo
  :ensure nil
  :bind
  (:map corfu-popupinfo-map
        ("M-p" . corfu-popupinfo-scroll-down)
        ("M-n" . corfu-popupinfo-scroll-up))
  :hook
  (corfu-mode . corfu-popupinfo-mode)
  :custom-face
  (corfu-popupinfo ((t :height 1.0))))

(use-package cape
  :after corfu
  :config
  (setq completion-at-point-functions '(cape-file)))
#+END_SRC

** Which-key
Display key bindings following your currently entered incomplete command
in a popup.
#+begin_src emacs-lisp
(use-package which-key
  :functions which-key-setup-minibuffer
  :config
  (which-key-setup-minibuffer)
  :hook
  (after-init . which-key-mode))
#+end_src

** Garbage collect
Emacs garbage collection. [[https://akrl.sdf.org/#orgc15a10d][reference]].
#+begin_src emacs-lisp
(defmacro k-time (&rest body)
  "Measure and return the time it takes evaluating BODY."
  `(let ((time (current-time)))
     ,@body
     (float-time (time-since time))))

;; (setq gc-cons-threshold (* 16 1024 1024))
(setq gc-cons-percentage .6)

(defvar k-gc-timer
  (run-with-idle-timer 15 t
                       (lambda ()
                         (message "Garbage Collector has run for %.06fsec"
                                  (k-time (garbage-collect))))))
#+end_src

** Statusline
#+begin_src emacs-lisp :tangle no
(use-package doom-modeline
  :functions doom-modeline-mode
  :custom
  (doom-modeline-icon nil)
  :init
  (doom-modeline-mode 1))

(use-package nerd-icons)
#+end_src

** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :functions dashboard-setup-startup-hook
  :init
  (dashboard-setup-startup-hook)
  :custom
  ;; (dashboard-center-content t)
  (dashboard-banner-logo-title "Welcome Motherfucker!!!")
  (dashboard-items '((recents . 5)
                     (bookmarks . 5)
                     (agenda . 5)))
  (dashboard-startupify-list '(dashboard-insert-items
                               dashboard-insert-newline
                               dashboard-insert-navigator
                               dashboard-insert-init-info
                               dashboard-insert-newline)))
#+end_src

** Init footer
Auto-generated convent footer for ~init.el~.
#+begin_src emacs-lisp
;;; init.el ends here
#+end_src
